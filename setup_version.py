# Copyright (c) 2019, Anders Lervik.
# Distributed under the MIT License. See LICENSE for more info.
"""
normetapi -  A package for interacting with the MET Norway Weather API.

Copyright (C) 2019, Anders Lervik.
This file only generates the verison info.
"""
import os
import pathlib
import subprocess


# For setting version. This is copied from Numpy's setup.py.
MAJOR = 0
MINOR = 0
MICRO = 1
DEV = 0
ISRELEASED = True

if not ISRELEASED:
    VERSION = '{:d}.{:d}.{:d}.dev{:d}'.format(MAJOR, MINOR, MICRO, DEV)
else:
    VERSION = '{:d}.{:d}.{:d}'.format(MAJOR, MINOR, MICRO)

VERSION_FILE = pathlib.Path('normetapi').joinpath('version.py')

VERSION_TXT = '''# Copyright (c) 2019, Anders Lervik.
# Distributed under the MIT License. See LICENSE for more info.
"""Version information for normetapi.

This file is generated by the script ``setup_version.py``.
"""
SHORT_VERSION = '{version:s}'
VERSION = '{version:s}'
FULL_VERSION = '{full_version:s}'
GIT_REVISION = '{git_revision:s}'
GIT_VERSION = '{git_version:s}'
RELEASE = {release:}

if not RELEASE:
    VERSION = GIT_VERSION
'''


def get_git_version():
    """Get the git revision as a string.

    This method is adapted from Numpy's setup.py

    Returns
    -------
    git_revision : string
        The git revision, it the git revision could not be determined,
        a 'unknown' will be returned.

    """
    git_revision = 'unknown'
    try:
        env = {}
        for key in ('SYSTEMROOT', 'PATH'):
            val = os.environ.get(key)
            if val is not None:
                env[key] = val
        # LANGUAGE is used on win32
        env['LANGUAGE'] = 'C'
        env['LANG'] = 'C'
        env['LC_ALL'] = 'C'
        out = subprocess.Popen(['git', 'rev-parse', 'HEAD'],
                               stdout=subprocess.PIPE,
                               env=env).communicate()[0]
        git_revision = out.strip().decode('ascii')
    except OSError:
        git_revision = 'unknown'
    return git_revision


def get_version_info():
    """Return the version number for normetapi.

    This method is adapted from Numpy's setup.py.

    Returns
    -------
    full_version : string
        The full version string for this release.
    git_revision : string
        The git revision number.

    """
    if os.path.exists('.git'):
        git_revision = get_git_version()
    elif os.path.exists(VERSION_FILE):
        try:
            from normetapi.version import git_revision
        except ImportError:
            raise ImportError('Unable to import git_revision. Try removing '
                              'normetapi/version.py and the build directory '
                              'before building.')
    else:
        git_revision = 'unknown'
    if not ISRELEASED:
        git_version = ''.join([VERSION.split('dev')[0],
                               'dev{:d}+'.format(DEV),
                               git_revision[:7]])
    else:
        git_version = VERSION
    full_version = VERSION
    return full_version, git_revision, git_version


def write_version_py():
    """Create a file with the version info for normetapi.

    This method is adapted from Numpy's setup.py.

    """
    full_version, git_revision, git_version = get_version_info()
    version_txt = VERSION_TXT.format(
        version=VERSION,
        full_version=full_version,
        git_revision=git_revision,
        git_version=git_version,
        release=ISRELEASED
    )
    with open(VERSION_FILE, 'wt') as vfile:
        vfile.write(version_txt)
    return full_version


if __name__ == '__main__':
    print('Setting version to: {}'.format(write_version_py()))
